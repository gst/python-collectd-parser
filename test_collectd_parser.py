#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
import socket

import unittest
import collectd_parser



class Test_Collectd_Parser(unittest.TestCase):

    def setUp(self):
        self.parser = collectd_parser.Parser()

    def test_empty(self):
        gen = self.parser.interpret('')
        self.assertEqual( [], list(gen) )

    def test_bad_1(self):
        gen = self.parser.interpret('0')
        self.assertRaises( collectd_parser.CollectdDecodeError, lambda: list(gen) )

    def test_bad_2(self):
        gen = self.parser.interpret('0'*10)
        self.assertRaises( collectd_parser.CollectdBufferOverflow, lambda: list(gen) )

    def test_bad_3(self):
        gen = self.parser.interpret('\0'*10)
        self.assertRaises( collectd_parser.CollectdValueError, lambda: list(gen) )

    # ...


    def test_good_1(self):
        buf = "\x00\x00\x00\tlh11\x00\x00\x08\x00\x0c\x15\x13^\xb4\xc7\x05\xe4,\x00\t\x00\x0c\x00\x00\x00\x02\x80\x00\x00\x00\x00\x02\x00\x0eprocesses\x00\x00\x04\x00\rps_state\x00\x00\x05\x00\x0cblocked\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x0c\x15\x13^\xb4\xc7\x05x\x0c\x00\x05\x00\x0czombies\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x0c\x15\x13^\xb4\xc7\x05\\d\x00\x05\x00\x0crunning\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x0c\x15\x13^\xb4\xc7\x05oU\x00\x05\x00\rsleeping\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\x00\x00\xb0w@\x00\x08\x00\x0c\x15\x13^\xb4\xc7\x06\xd5^\x00\x04\x00\x0efork_rate\x00\x00\x05\x00\x05\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00\t\xa3!\x00\x08\x00\x0c\x15\x13^\xb7E\x9fS5\x00\x02\x00\x07df\x00\x00\x03\x00\troot\x00\x00\x04\x00\x0fdf_complex\x00\x00\x05\x00\tfree\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00@\x92\x9a3B\x00\x08\x00\x0c\x15\x13^\xb7E\x9fz\xc2\x00\x05\x00\rreserved\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\x00Y\xb0\xf2A\x00\x08\x00\x0c\x15\x13^\xb7E\x9f\x8c6\x00\x05\x00\tused\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\x00\xa3\xe9\x00B\x00\x08\x00\x0c\x15\x13^\xb7E\x9f\xa4M\x00\x04\x00\x0edf_inodes\x00\x00\x05\x00\tfree\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\xc0\x1d\xd1UA\x00\x08\x00\x0c\x15\x13^\xb7E\x9f\xb4\x87\x00\x05\x00\rreserved\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x0c\x15\x13^\xb7E\x9f\xc3\xa7\x00\x05\x00\tused\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\x00$\xee\x17A\x00\x08\x00\x0c\x15\x13^\xb7E\xa0`$\x00\x03\x00\thome\x00\x00\x04\x00\x0fdf_complex\x00\x00\x05\x00\tfree\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00@\xeb\x80=B\x00\x08\x00\x0c\x15\x13^\xb7E\xa0jX\x00\x05\x00\rreserved\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\x00\xe6\x9a\xfbA\x00\x08\x00\x0c\x15\x13^\xb7E\xa0n\xd5\x00\x05\x00\tused\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\x00\x9a\x05\x05B\x00\x08\x00\x0c\x15\x13^\xb7E\xa0sQ\x00\x04\x00\x0edf_inodes\x00\x00\x05\x00\tfree\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\xe0)\xea`A\x00\x08\x00\x0c\x15\x13^\xb7E\xa0v\xe7\x00\x05\x00\rreserved\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x0c\x15\x13^\xb7E\xa0z\xd1\x00\x05\x00\tused\x00\x00\x06\x00\x0f\x00\x01\x01\x00\x00\x00\x00\x88u\x03A\x00\x08\x00\x0c\x15\x13^\xb7E\xa1\xc56\x00\x02\x00\x08cpu\x00\x00\x03\x00\x060\x00\x00\x04\x00\x08cpu\x00\x00\x05\x00\tuser\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00 w\\\x00\x08\x00\x0c\x15\x13^\xb7E\xa1\xd6\xe3\x00\x05\x00\tnice\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00\x00\x91V\x00\x08\x00\x0c\x15\x13^\xb7E\xa1\xee\xec\x00\x05\x00\x0bsystem\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00\x06\xdb\xe4\x00\x08\x00\x0c\x15\x13^\xb7E\xa2\x02e\x00\x05\x00\tidle\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x01\x1d\xf3\x97\x00\x08\x00\x0c\x15\x13^\xb7E\xa2\r\xc4\x00\x05\x00\twait\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00\x02_r\x00\x08\x00\x0c\x15\x13^\xb7E\xa2\x17\xc1\x00\x05\x00\x0einterrupt\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00\x00\x00-\x00\x08\x00\x0c\x15\x13^\xb7E\xa2\x1bc\x00\x05\x00\x0csoftirq\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00\x00\x12T\x00\x08\x00\x0c\x15\x13^\xb7E\xa2 R\x00\x05\x00\nsteal\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x0c\x15\x13^\xb7E\xa2*\x0b\x00\x03\x00\x061\x00\x00\x05\x00\tuser\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00\x1c\xbc\xba\x00\x08\x00\x0c\x15\x13^\xb7E\xa2.\x88\x00\x05\x00\tnice\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00\x00aX\x00\x08\x00\x0c\x15\x13^\xb7E\xa21\xdc\x00\x05\x00\x0bsystem\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00\x05\xfa\x16\x00\x08\x00\x0c\x15\x13^\xb7E\xa25L\x00\x05\x00\tidle\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00(#\x1e\x00\x08\x00\x0c\x15\x13^\xb7E\xa29'\x00\x05\x00\twait\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00\x00a\xb3\x00\x08\x00\x0c\x15\x13^\xb7E\xa2<\x03\x00\x05\x00\x0einterrupt\x00\x00\x06\x00\x0f\x00\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00"
        gen = self.parser.interpret(buf)
        items = list(gen)
        self.assertIsInstance(items[0], collectd_parser.Values)
        self.assertEqual(31, len(items))
        expected = collectd_parser.Values(host='lh11', interval=10.0, plugin='processes',
                                          time=1414363859.1097345, type='ps_state',
                                          typeinstance='blocked')
        self.assertEquals(vars(expected), vars(items[0]))
        expected = collectd_parser.Values(host='lh11', interval=10.0, time=1414363869.088027,
                                          plugin='cpu', plugininstance='1', type='cpu',
                                          typeinstance='interrupt')
        self.assertEqual(vars(expected), vars(items[-1]))
        self.assertEqual([(2, 0)], items[-1][:])



class Test_Collected_Reader(Test_Collectd_Parser):
    ''' Same than Parser but directly uses the reader.
    '''

    _listen_host_addr = '127.0.0.1'
    _dst_addr = [ _listen_host_addr, 0 ]
    _src_addr = ( _listen_host_addr, 0 )

    def _interpret(self, buffer):
        bytes_sent = self.sock.sendto(buffer, self._dst_addr)
        self.assertEqual(len(buffer), bytes_sent)
        return self.orig_interpret()

    def setUp(self, dobind=True):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
        if dobind:
            self.sock.bind(self._src_addr)
        self.parser = collectd_parser.Reader(self._listen_host_addr)
        self._dst_addr[1] = self.parser._sock.getsockname()[1]
        self._dst_addr = tuple(self._dst_addr)
        self.orig_interpret = self.parser.interpret
        self.parser.interpret = self._interpret

    def tearDown(self):
        self.sock.close()
        self.parser.close()


class Test_Collectd_Multicast(Test_Collected_Reader):

    _listen_host_addr = None
    _dst_addr = [ collectd_parser.DEFAULT_IPv4_GROUP, 0 ]

    def setUp(self):
        super(Test_Collectd_Multicast, self).setUp(dobind=False)

